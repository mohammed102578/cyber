<?php

namespace Tests\Feature\Admin;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use App\Models\BelongBelongVulnerability;
use App\Models\Admin\Admin as admin;
use App\Models\BelongVulnerability;
use App\Models\Vulnerability;

class BelongBelongVulnerabilityTest extends TestCase
{
    use RefreshDatabase;
    public function login_test(){
        $data = [
            'phone'=>'919977513',
            'email'=>"mohammed123@gmail.com",
            'password'=>"@gaabhhbh",
            'image'=>null,
            'name'=>'mohammed',
            'last_seen_at'=>null,
            'password_changed_at'=>null
        ];
        $admin=Admin::create($data);
       return $this->actingAs($admin,'admin');

    }

    public function create_belong_vulnerability(){
        $vulnerability = Vulnerability::create([
            'vulnerability' => 'Test BelongVulnerability',

        ]);

        $belongVulnerability = BelongVulnerability::create([
            'vulnerability' => 'Test BelongVulnerability',
            'vulnerability_id'=>$vulnerability->id

        ]);

        return  $vulnerability->id;
    }
    public function test_the_belongvulenrabilities_returns_a_successful_response(): void
    {
        $this->login_test();
        $response = $this->get('/admin/belong_belong_vulnerabilities/1');
        $response->assertStatus(200);
    }


    public function test_the_get_belongvulenrabilities_returns_a_successful_response(): void
    {
        $this->login_test();
        $response = $this->get('/admin/get_belong_belong_vulenrabilities/1');
        $response->assertStatus(200);
    }


    public function test_can_create_belong_belong_vulnerability()
    {
        $this->login_test();
        $response = $this->post('/admin/create_belong_belong_vulnerability', [
            'vulnerability' => 'Test BelongBelongVulnerability',
            'belong_vulnerability_id'=>$this->create_belong_vulnerability()
        ]);

        $response->assertStatus(200);

        $this->assertDatabaseHas('belong_belong_vulnerabilities', ['vulnerability' => 'Test BelongBelongVulnerability']);
    }

    public function test_can_edit_Belong_belong_vulnerability()
    {
        $this->login_test();
        $belongVulnerability = BelongBelongVulnerability::create([
            'vulnerability' => 'Test BelongBelongVulnerability',
            'belong_vulnerability_id'=>$this->create_belong_vulnerability()
        ]);


        $response = $this->get('/admin/edit_belong_belong_vulnerability', [
            'id' => $belongVulnerability->id,
        ]);
        $response->assertStatus(200);

        $retriveVulnerability=BelongBelongVulnerability::find($belongVulnerability->id);

        $this->assertEquals($belongVulnerability->id,$retriveVulnerability->id);

    }



    public function test_can_update_belong_belong_vulnerability()
    {
        $this->login_test();
        $vulnerability = BelongBelongVulnerability::create([
            'vulnerability' => 'Test BelongBelongVulnerability',
            'belong_vulnerability_id'=>$this->create_belong_vulnerability()
        ]);

        $response = $this->patch('/admin/update_belong_belong_vulnerability/',
        [   'id'=>$vulnerability->id,
            'vulnerability' => 'Updated Test BelongBelongVulnerability',
            'belong_vulnerability_id'=>$this->create_belong_vulnerability()
        ]);

        $response->assertStatus(200);
        $this->assertDatabaseHas('belong_belong_vulnerabilities',
         ['vulnerability' => 'Updated Test BelongBelongVulnerability',

        ]);
    }

    public function test_can_delete_belong_belong_vulnerability()
    {
        $this->login_test();
        $vulnerability = BelongBelongVulnerability::create([
            'vulnerability' => 'Test BelongBelongVulnerability',
            'belong_vulnerability_id'=>$this->create_belong_vulnerability()
        ]);

        $response = $this->delete('/admin/delete_admin_belong_belong_vulnerability',['id'=>$vulnerability->id]);
        $response->assertStatus(200);
        $this->assertDatabaseMissing('belong_belong_vulnerabilities',
         ['vulnerability' => 'Test BelongBelongVulnerability',
          'belong_vulnerability_id'=>$this->create_belong_vulnerability()
        ]);
    }



}
